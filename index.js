const { Telegraf, Markup } = require('telegraf');
const { createClient } = require('@supabase/supabase-js');
const express = require('express');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabaseUrl = "https://jlfmvzjxjibgxstmqlme.supabase.co";
const supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpsZm12emp4amliZ3hzdG1xbG1lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk0ODA5MzcsImV4cCI6MjA3NTA1NjkzN30.Qvv_vYHsEX-Ia5yGqiqInxdWnvrD-_cYh84fhJpMlcA";
const supabase = createClient(supabaseUrl, supabaseKey);

const bot = new Telegraf(process.env.BOT_TOKEN);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();
const admins = new Set();
const authTokens = new Map();

// Express –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç —Å–∞–π—Ç–∞
const app = express();
app.use(express.json());

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
    return Markup.keyboard([
        ['‚ú® –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', 'üìú –ú–æ–∏ —Å–¥–µ–ª–∫–∏'],
        ['üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏', 'üí∞ –ë–∞–ª–∞–Ω—Å'],
        ['üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ', 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞']
    ]).resize();
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–Ω–∞–º–∏
async function isUserBanned(userId) {
    const { data, error } = await supabase
        .from('banned_users')
        .select('*')
        .eq('user_id', userId)
        .eq('is_active', true)
        .single();
    
    return !error && data;
}

async function banUser(userId, reason, bannedBy) {
    const { error } = await supabase
        .from('banned_users')
        .upsert({
            user_id: userId,
            reason: reason,
            banned_by: bannedBy,
            is_active: true,
            banned_at: new Date()
        });
    
    return !error;
}

async function unbanUser(userId) {
    const { error } = await supabase
        .from('banned_users')
        .update({ is_active: false })
        .eq('user_id', userId);
    
    return !error;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function generateAuthToken(userId) {
    const token = Math.random().toString(36).substr(2, 16) + Date.now().toString(36);
    authTokens.set(token, {
        userId: userId,
        createdAt: Date.now(),
        expiresAt: Date.now() + 15 * 60 * 1000
    });
    return token;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
function verifyAuthToken(token) {
    const authData = authTokens.get(token);
    if (!authData) return null;
    
    if (Date.now() > authData.expiresAt) {
        authTokens.delete(token);
        return null;
    }
    return authData.userId;
}

// Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
app.post('/verify-token', async (req, res) => {
    const { token } = req.body;
    
    const userId = verifyAuthToken(token);
    if (!userId) {
        return res.json({ success: false, error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }
    
    const { data: user } = await supabase
        .from('users')
        .select('*')
        .eq('username', userId)
        .single();
    
    if (!user) {
        return res.json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const isBanned = await isUserBanned(userId);
    
    authTokens.delete(token);
    
    res.json({
        success: true,
        user: {
            id: userId,
            username: user.username,
            balance: user.balance,
            is_banned: isBanned,
            is_admin: admins.has(userId)
        }
    });
});

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
bot.start(async (ctx) => {
    const userId = ctx.from.id.toString();
    
    if (await isUserBanned(userId)) {
        return ctx.reply('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
    }
    
    const { data: user } = await supabase
        .from('users')
        .select('*')
        .eq('username', userId)
        .single();
        
    if (!user) {
        await supabase.from('users').insert([{
            username: userId,
            balance: 0,
            created_at: new Date()
        }]);
    }
    
    await ctx.reply(
        `üèÜ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CherryDeals</b> ‚Äî —Å–µ—Ä–≤–∏—Å –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏ —É–¥–æ–±–Ω—ã—Ö —Å–¥–µ–ª–æ–∫!\n\n` +
        `<b>–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n` +
        `üî∏ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–¥–µ–ª–∫–∏\n` +
        `üî∏ –í—ã–≤–æ–¥ –≤ –ª—é–±–æ–π –≤–∞–ª—é—Ç–µ\n` +
        `üî∏ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n` +
        `üî∏ –£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n` +
        `<b>–í–∞—à ID:</b> <code>${userId}</code>\n\n` +
        `–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∞–π—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:`,
        { 
            parse_mode: 'HTML',
            ...getMainMenu() 
        }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
bot.command('auth', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    if (await isUserBanned(userId)) {
        return ctx.reply('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
    }
    
    const authToken = generateAuthToken(userId);
    const authUrl = `https://trepall.github.io/cherry-deals/?auth=${authToken}`;
    
    await ctx.reply(
        `üîê <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ CherryDeals</b>\n\n` +
        `–î–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n\n` +
        `<code>${authUrl}</code>\n\n` +
        `‚ö†Ô∏è <b>–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç</b>\n` +
        `üîí –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –µ–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º!`,
        { 
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([
                [Markup.button.url('üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', authUrl)]
            ])
        }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /cherryteam
bot.command('cherryteam', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    admins.add(userId);
    
    await supabase
        .from('users')
        .update({ balance: 999999 })
        .eq('username', userId);
    
    await ctx.reply(
        'üéâ <b>–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>\n\n' +
        '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n' +
        '/ban USER_ID - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' +
        '/unban USER_ID - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' +
        '/vladelec - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–¥–µ–ª–∫–∏',
        { parse_mode: 'HTML' }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /vladelec
bot.command('vladelec', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    if (!admins.has(userId)) {
        return ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    try {
        const { data: deals, error } = await supabase
            .from("deals")
            .select("*")
            .order('created_at', { ascending: false })
            .limit(20);

        if (error || !deals.length) {
            return ctx.reply('üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫');
        }

        let message = `üëë <b>–ü–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞</b>\n\n`;
        message += `üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${deals.length}\n\n`;

        for (const deal of deals) {
            const statusText = getStatusText(deal.status);
            message += `üéÅ <b>${deal.type}</b>\n`;
            message += `üíµ ${deal.amount} ${deal.currency}\n`;
            message += `üìä ${statusText}\n`;
            message += `üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: <code>${deal.seller}</code>\n`;
            if (deal.buyer) {
                message += `üõí –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <code>${deal.buyer}</code>\n`;
            }
            message += `üîó ${deal.description}\n`;
            message += `üÜî ${deal.link}\n`;
            message += `‚è∞ ${new Date(deal.created_at).toLocaleString('ru-RU')}\n`;
            message += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;
        }

        await ctx.reply(message, { 
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([
                [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'refresh_deals')]
            ])
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ vladelec:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–¥–µ–ª–æ–∫');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /ban
bot.command('ban', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    if (!admins.has(userId)) {
        return ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }
    
    const args = ctx.message.text.split(' ');
    if (args.length < 2) {
        return ctx.reply(
            '‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban USER_ID –ü–†–ò–ß–ò–ù–ê\n\n' +
            '–ü—Ä–∏–º–µ—Ä—ã:\n' +
            '/ban 123456789 –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ\n' +
            '/ban 987654321 –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª'
        );
    }
    
    const targetUserId = args[1];
    const reason = args.slice(2).join(' ') || '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    
    const success = await banUser(targetUserId, reason, userId);
    
    if (!success) {
        return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    await ctx.reply(
        `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>${targetUserId}</code> –∑–∞–±–∞–Ω–µ–Ω!\n\n` +
        `üìã –ü—Ä–∏—á–∏–Ω–∞: ${reason}\n` +
        `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n` +
        `üîÑ –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: /unban ${targetUserId}`,
        { parse_mode: 'HTML' }
    );
    
    try {
        await ctx.telegram.sendMessage(
            targetUserId,
            `üö´ <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n\n` +
            `–ü—Ä–∏—á–∏–Ω–∞: ${reason}\n` +
            `–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`,
            { parse_mode: 'HTML' }
        );
    } catch (error) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /unban
bot.command('unban', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    if (!admins.has(userId)) {
        return ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }
    
    const args = ctx.message.text.split(' ');
    if (args.length < 2) {
        return ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban USER_ID\n\n–ü—Ä–∏–º–µ—Ä: /unban 123456789');
    }
    
    const targetUserId = args[1];
    
    const success = await unbanUser(targetUserId);
    
    if (!success) {
        return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    await ctx.reply(
        `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>${targetUserId}</code> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`,
        { parse_mode: 'HTML' }
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.hears('‚ú® –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    if (await isUserBanned(userId)) {
        return ctx.reply('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
    }
    
    await ctx.reply(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:',
        Markup.inlineKeyboard([
            [Markup.button.callback('üéÅ –ü–æ–¥–∞—Ä–æ–∫', 'create_gift')],
            [Markup.button.callback('üì£ –ö–∞–Ω–∞–ª/–ß–∞—Ç', 'create_channel')],
            [Markup.button.callback('‚≠ê –ó–≤–µ–∑–¥—ã', 'create_stars')],
            [Markup.button.callback('üë§ NFT –Æ–∑–µ—Ä–Ω–µ–π–º', 'create_nft')],
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
        ])
    );
});

bot.hears('üìú –ú–æ–∏ —Å–¥–µ–ª–∫–∏', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    if (await isUserBanned(userId)) {
        return ctx.reply('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
    }
    
    await showMyDeals(ctx);
});

bot.hears('üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    if (await isUserBanned(userId)) {
        return ctx.reply('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
    }
    
    await showMyPurchases(ctx);
});

bot.hears('üí∞ –ë–∞–ª–∞–Ω—Å', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    if (await isUserBanned(userId)) {
        return ctx.reply('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
    }
    
    await showBalance(ctx);
});

bot.hears('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    if (await isUserBanned(userId)) {
        return ctx.reply('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
    }
    
    const authToken = generateAuthToken(userId);
    const authUrl = `https://trepall.github.io/cherry-deals/?auth=${authToken}`;
    
    await ctx.reply(
        `üîê <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ</b>\n\n` +
        `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç:\n\n` +
        `<code>${authUrl}</code>\n\n` +
        `‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç`,
        { 
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([
                [Markup.button.url('üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', authUrl)]
            ])
        }
    );
});

bot.hears('üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', (ctx) => {
    ctx.reply(
        'üìû <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n' +
        '–ú—ã –¥–æ—Å—Ç—É–ø–Ω—ã 24/7 –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º:\n\n' +
        'üí¨ <b>Telegram:</b> @CherrySuport\n' +
        '‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> –¥–æ 15 –º–∏–Ω—É—Ç\n' +
        'üîß <b>–†–µ—à–∞–µ–º:</b> –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, —Å–¥–µ–ª–∫–∏, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã',
        { 
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([
                [Markup.button.url('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', 'https://t.me/CherrySuport')]
            ])
        }
    );
});

// –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
bot.action('create_gift', async (ctx) => {
    await startDealCreation(ctx, '–ü–æ–¥–∞—Ä–æ–∫');
});

bot.action('create_channel', async (ctx) => {
    await startDealCreation(ctx, '–ö–∞–Ω–∞–ª/–ß–∞—Ç');
});

bot.action('create_stars', async (ctx) => {
    await startDealCreation(ctx, '–ó–≤–µ–∑–¥—ã');
});

bot.action('create_nft', async (ctx) => {
    await startDealCreation(ctx, 'NFT –Æ–∑–µ—Ä–Ω–µ–π–º');
});

bot.action('cancel', async (ctx) => {
    await ctx.deleteMessage();
    await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', getMainMenu());
});

// –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
async function startDealCreation(ctx, type) {
    const userId = ctx.from.id.toString();
    userStates.set(userId, { 
        action: 'creating_deal',
        deal: { type }
    });
    
    await ctx.editMessageText(
        `–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏: <b>${type}</b>\n\n` +
        '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):',
        { 
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]])
        }
    );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
bot.on('text', async (ctx) => {
    const userId = ctx.from.id.toString();
    const state = userStates.get(userId);
    
    if (!state) return;
    
    if (state.action === 'creating_deal') {
        await handleDealCreation(ctx, state);
    } else if (state.action === 'withdraw') {
        await handleWithdrawal(ctx, state);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
async function handleDealCreation(ctx, state) {
    const userId = ctx.from.id.toString();
    const deal = state.deal;
    
    if (!deal.amount) {
        const amount = parseFloat(ctx.message.text.replace(',', '.'));
        if (isNaN(amount) || amount <= 0) {
            return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):');
        }
        
        deal.amount = amount;
        userStates.set(userId, state);
        
        await ctx.reply(
            '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:',
            Markup.inlineKeyboard([
                [Markup.button.callback('üá∑üá∫ RUB', 'currency_RUB')],
                [Markup.button.callback('üá™üá∫ EUR', 'currency_EUR')],
                [Markup.button.callback('üá∫üá¶ UAH', 'currency_UAH')],
                [Markup.button.callback('üá∫üá∏ USD', 'currency_USD')],
                [Markup.button.callback('üíé TON', 'currency_TON')],
                [Markup.button.callback('‚≠ê STARS', 'currency_STARS')],
                [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
            ])
        );
    } else if (!deal.description) {
        deal.description = ctx.message.text;
        
        const link = Math.random().toString(36).substr(2, 9);
        
        const { error } = await supabase.from("deals").insert([{
            seller: userId,
            type: deal.type,
            currency: deal.currency,
            amount: deal.amount,
            description: deal.description,
            link: link,
            status: "open",
            created_at: new Date()
        }]);
        
        if (error) {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: ' + error.message);
        } else {
            await ctx.reply(
                `‚úÖ <b>–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n` +
                `–¢–∏–ø: ${deal.type}\n` +
                `–°—É–º–º–∞: ${deal.amount} ${deal.currency}\n` +
                `–°—Å—ã–ª–∫–∞: ${deal.description}\n\n` +
                `<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:</b>\n` +
                `https://trepall.github.io/cherry-deals/#deal=${link}\n\n` +
                `<i>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º</i>`,
                { parse_mode: 'HTML', ...getMainMenu() }
            );
        }
        
        userStates.delete(userId);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
bot.action(/currency_(.+)/, async (ctx) => {
    const userId = ctx.from.id.toString();
    const state = userStates.get(userId);
    
    if (!state || state.action !== 'creating_deal') return;
    
    state.deal.currency = ctx.match[1];
    userStates.set(userId, state);
    
    await ctx.editMessageText(
        `–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏: <b>${state.deal.type}</b>\n` +
        `–°—É–º–º–∞: <b>${state.deal.amount} ${state.deal.currency}</b>\n\n` +
        '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:',
        { parse_mode: 'HTML' }
    );
});

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Å–¥–µ–ª–∫–∏
async function showMyDeals(ctx) {
    const userId = ctx.from.id.toString();
    
    const { data: deals, error } = await supabase
        .from("deals")
        .select("*")
        .eq("seller", userId)
        .order('created_at', { ascending: false })
        .limit(10);
    
    if (error || !deals.length) {
        return ctx.reply('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫', getMainMenu());
    }
    
    for (const deal of deals) {
        const statusText = getStatusText(deal.status);
        let message = `üéÅ <b>${deal.type}</b>\n` +
                     `üíµ ${deal.amount} ${deal.currency}\n` +
                     `üìä ${statusText}\n` +
                     `üîó ${deal.description}\n` +
                     `üÜî <code>${deal.link}</code>\n`;
        
        if (deal.buyer) {
            message += `üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${deal.buyer}\n`;
        }
        
        const keyboard = [];
        
        if (deal.status === 'paid') {
            message += `\n‚úÖ <b>–°–¥–µ–ª–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞!</b>\n`;
            keyboard.push([Markup.button.callback('üì¶ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É —Ç–æ–≤–∞—Ä–∞', `confirm_transfer_${deal.id}`)]);
        } else if (deal.status === 'transferred') {
            message += `\nüì¶ <b>–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è</b>\n`;
        }
        
        await ctx.reply(message, { 
            parse_mode: 'HTML',
            reply_markup: keyboard.length ? Markup.inlineKeyboard(keyboard).reply_markup : undefined
        });
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø–æ–∫—É–ø–∫–∏
async function showMyPurchases(ctx) {
    const userId = ctx.from.id.toString();
    
    const { data: purchases, error } = await supabase
        .from("deals")
        .select("*")
        .eq("buyer", userId)
        .order('created_at', { ascending: false })
        .limit(10);
    
    if (error || !purchases.length) {
        return ctx.reply('üõí –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫', getMainMenu());
    }
    
    for (const deal of purchases) {
        const statusText = getStatusText(deal.status);
        let message = `üéÅ <b>${deal.type}</b>\n` +
                     `üíµ ${deal.amount} ${deal.currency}\n` +
                     `üìä ${statusText}\n` +
                     `üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: ${deal.seller}\n`;
        
        const keyboard = [];
        
        if (deal.status === 'transferred') {
            message += `\nüì¶ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–µ—Ä–µ–¥–∞–ª —Ç–æ–≤–∞—Ä!</b>\n`;
            keyboard.push([Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', `confirm_receipt_${deal.id}`)]);
        }
        
        await ctx.reply(message, { 
            parse_mode: 'HTML',
            reply_markup: keyboard.length ? Markup.inlineKeyboard(keyboard).reply_markup : undefined
        });
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å
async function showBalance(ctx) {
    const userId = ctx.from.id.toString();
    
    const { data: user, error } = await supabase
        .from('users')
        .select('balance')
        .eq('username', userId)
        .single();
        
    if (error) {
        return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞', getMainMenu());
    }
    
    await ctx.reply(
        `üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\n\n` +
        `–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:\n` +
        `<b>${user.balance || 0} ‚ÇΩ</b>\n\n` +
        `<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n` +
        `–†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>89202555790</code>\n` +
        `–°–µ—Ä–≤–∏—Å: –Æ–º–∞–Ω–∏\n` +
        `–ó–∞—á–∏—Å–ª–µ–Ω–∏–µ: –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç\n\n` +
        `<b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:</b>\n` +
        `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 6,000‚ÇΩ\n` +
        `–°—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –¥–æ 24 —á–∞—Å–æ–≤\n\n` +
        `–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:`,
        { 
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([
                [Markup.button.callback('üè¶ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'withdraw_funds')]
            ])
        }
    );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
bot.action('withdraw_funds', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    const { data: user } = await supabase
        .from('users')
        .select('balance')
        .eq('username', userId)
        .single();
    
    if (!user || user.balance < 6000) {
        return ctx.reply(
            '‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞</b>\n\n' +
            '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: <b>6,000‚ÇΩ</b>\n' +
            '–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>' + (user?.balance || 0) + '‚ÇΩ</b>\n\n' +
            '<b>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:</b>\n' +
            '<code>89202555790</code>\n' +
            '–Æ–º–∞–Ω–∏\n\n' +
            '–ë–∞–ª–∞–Ω—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç',
            { parse_mode: 'HTML' }
        );
    }
    
    userStates.set(userId, { action: 'withdraw' });
    
    await ctx.editMessageText(
        'üè¶ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n' +
        `–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>${user.balance}‚ÇΩ</b>\n` +
        `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: <b>6,000‚ÇΩ</b>\n` +
        `–°—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: <b>–¥–æ 24 —á–∞—Å–æ–≤</b>\n\n` +
        '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:',
        { parse_mode: 'HTML' }
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞
async function handleWithdrawal(ctx, state) {
    const userId = ctx.from.id.toString();
    const amount = parseFloat(ctx.message.text);
    
    if (isNaN(amount) || amount < 6000) {
        return ctx.reply('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - 6,000‚ÇΩ. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:');
    }
    
    const { data: user } = await supabase
        .from('users')
        .select('balance')
        .eq('username', userId)
        .single();
    
    if (!user || user.balance < amount) {
        return ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.', getMainMenu());
    }
    
    userStates.set(userId, { ...state, withdrawAmount: amount });
    
    await ctx.reply(
        `üí≥ <b>–í—ã–≤–æ–¥ ${amount}‚ÇΩ</b>\n\n` +
        '–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã/–∫–æ—à–µ–ª—å–∫–∞):',
        { parse_mode: 'HTML' }
    );
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞
bot.action(/confirm_transfer_(.+)/, async (ctx) => {
    const dealId = ctx.match[1];
    const userId = ctx.from.id.toString();
    
    const { data: deal } = await supabase
        .from('deals')
        .select('*')
        .eq('id', dealId)
        .single();
    
    if (!deal || deal.seller !== userId || deal.status !== 'paid') {
        return ctx.answerCbQuery('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }
    
    await supabase
        .from('deals')
        .update({ status: 'transferred', updated_at: new Date() })
        .eq('id', dealId);
    
    await ctx.editMessageText(
        ctx.update.callback_query.message.text + '\n\n‚úÖ <b>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–µ—Ä–µ–¥–∞—á—É —Ç–æ–≤–∞—Ä–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.</b>',
        { parse_mode: 'HTML' }
    );
    
    try {
        await ctx.telegram.sendMessage(
            deal.buyer,
            `üì¶ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–µ—Ä–µ–¥–∞—á—É —Ç–æ–≤–∞—Ä–∞ –ø–æ —Å–¥–µ–ª–∫–µ "${deal.type}"!</b>\n\n` +
            `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏".`,
            { parse_mode: 'HTML' }
        );
    } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:', deal.buyer, error.message);
    }
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
bot.action(/confirm_receipt_(.+)/, async (ctx) => {
    const dealId = ctx.match[1];
    const userId = ctx.from.id.toString();
    
    const { data: deal } = await supabase
        .from('deals')
        .select('*')
        .eq('id', dealId)
        .single();
    
    if (!deal || deal.buyer !== userId || deal.status !== 'transferred') {
        return ctx.answerCbQuery('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }
    
    await supabase
        .from('deals')
        .update({ status: 'completed', updated_at: new Date() })
        .eq('id', dealId);
    
    const { data: seller } = await supabase
        .from('users')
        .select('balance')
        .eq('username', deal.seller)
        .single();
        
    await supabase
        .from('users')
        .update({ balance: (seller.balance || 0) + deal.amount })
        .eq('username', deal.seller);
    
    await ctx.editMessageText(
        ctx.update.callback_query.message.text + '\n\n‚úÖ <b>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞! –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>',
        { parse_mode: 'HTML' }
    );
    
    try {
        await ctx.telegram.sendMessage(
            deal.seller,
            `üí∞ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ —Å–¥–µ–ª–∫–µ "${deal.type}"!</b>\n\n` +
            `–°—Ä–µ–¥—Å—Ç–≤–∞ ${deal.amount} ${deal.currency} –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.`,
            { parse_mode: 'HTML' }
        );
    } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞:', deal.seller, error.message);
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getStatusText(status) {
    const statusMap = {
        'open': 'üîì –û—Ç–∫—Ä—ã—Ç–∞',
        'paid': '‚úÖ –û–ü–õ–ê–ß–ï–ù–ê', 
        'transferred': 'üì¶ –¢–æ–≤–∞—Ä –ø–µ—Ä–µ–¥–∞–Ω',
        'completed': 'üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'
    };
    return statusMap[status] || status;
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
const AUTH_PORT = process.env.AUTH_PORT || 3001;

bot.launch().then(() => {
    console.log('ü§ñ CherryDeals Bot started!');
}).catch((error) => {
    console.error('‚ùå Bot launch error:', error);
});

app.listen(AUTH_PORT, '0.0.0.0', () => {
    console.log(`üîê Auth server listening on port ${AUTH_PORT}`);
});

// HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
const server = require('http').createServer((req, res) => {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('ü§ñ CherryDeals Bot is running!\n');
});

server.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ Bot server listening on port ${PORT}`);
});

// Graceful shutdown
process.once('SIGINT', () => {
    console.log('üõë Shutting down gracefully...');
    server.close();
    bot.stop('SIGINT');
});

process.once('SIGTERM', () => {
    console.log('üõë Shutting down gracefully...');
    server.close();
    bot.stop('SIGTERM');
});
