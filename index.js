const { Telegraf, Markup } = require('telegraf');
const { createClient } = require('@supabase/supabase-js');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabaseUrl = "https://jlfmvzjxjibgxstmqlme.supabase.co";
const supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpsZm12emp4amliZ3hzdG1xbG1lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk0ODA5MzcsImV4cCI6MjA3NTA1NjkzN30.Qvv_vYHsEX-Ia5yGqiqInxdWnvrD-_cYh84fhJpMlcA";
const supabase = createClient(supabaseUrl, supabaseKey);

const bot = new Telegraf(process.env.BOT_TOKEN);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const admins = new Set();
const bannedUsers = new Set();

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
    return Markup.keyboard([
        ['‚ú® –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', 'üìú –ú–æ–∏ —Å–¥–µ–ª–∫–∏'],
        ['üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏', 'üí∞ –ë–∞–ª–∞–Ω—Å'],
        ['üí¨ –ß–∞—Ç', 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞']
    ]).resize();
}

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
bot.start(async (ctx) => {
    const userId = ctx.from.id.toString();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (bannedUsers.has(userId)) {
        return ctx.reply('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const { data: user } = await supabase
        .from('users')
        .select('*')
        .eq('username', userId)
        .single();
        
    if (!user) {
        await supabase.from('users').insert([{
            username: userId,
            balance: 0,
            created_at: new Date()
        }]);
    }
    
    await ctx.reply(
        `üçí <b>CherryDeals</b>\n` +
        `–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –≤ Telegram\n\n` +
        `–í–∞—à ID: <code>${userId}</code>`,
        { 
            parse_mode: 'HTML',
            ...getMainMenu() 
        }
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.hears('‚ú® –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', async (ctx) => {
    await ctx.reply(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:',
        Markup.inlineKeyboard([
            [Markup.button.callback('üéÅ –ü–æ–¥–∞—Ä–æ–∫', 'create_gift')],
            [Markup.button.callback('üì£ –ö–∞–Ω–∞–ª/–ß–∞—Ç', 'create_channel')],
            [Markup.button.callback('‚≠ê –ó–≤–µ–∑–¥—ã', 'create_stars')],
            [Markup.button.callback('üë§ NFT –Æ–∑–µ—Ä–Ω–µ–π–º', 'create_nft')],
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
        ])
    );
});

bot.hears('üìú –ú–æ–∏ —Å–¥–µ–ª–∫–∏', async (ctx) => {
    await showMyDeals(ctx);
});

bot.hears('üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏', async (ctx) => {
    await showMyPurchases(ctx);
});

bot.hears('üí∞ –ë–∞–ª–∞–Ω—Å', async (ctx) => {
    await showBalance(ctx);
});

bot.hears('üí¨ –ß–∞—Ç', async (ctx) => {
    await ctx.reply(
        'üí¨ <b>–ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</b>\n\n' +
        '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
        { 
            parse_mode: 'HTML',
            ...Markup.keyboard([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']]).resize()
        }
    );
});

bot.hears('üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', (ctx) => {
    ctx.reply(
        'üìû <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n' +
        '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:\n' +
        '@CherrySuport',
        { parse_mode: 'HTML' }
    );
});

bot.hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', (ctx) => {
    ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', getMainMenu());
});

// –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
bot.action('create_gift', async (ctx) => {
    await startDealCreation(ctx, '–ü–æ–¥–∞—Ä–æ–∫');
});

bot.action('create_channel', async (ctx) => {
    await startDealCreation(ctx, '–ö–∞–Ω–∞–ª/–ß–∞—Ç');
});

bot.action('create_stars', async (ctx) => {
    await startDealCreation(ctx, '–ó–≤–µ–∑–¥—ã');
});

bot.action('create_nft', async (ctx) => {
    await startDealCreation(ctx, 'NFT –Æ–∑–µ—Ä–Ω–µ–π–º');
});

bot.action('cancel', async (ctx) => {
    await ctx.deleteMessage();
    await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', getMainMenu());
});

// –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
async function startDealCreation(ctx, type) {
    ctx.session = ctx.session || {};
    ctx.session.creatingDeal = { type };
    
    await ctx.editMessageText(
        `–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏: <b>${type}</b>\n\n` +
        '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏:',
        { 
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]])
        }
    );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
bot.on('text', async (ctx) => {
    if (!ctx.session?.creatingDeal) return;
    
    const userId = ctx.from.id.toString();
    const deal = ctx.session.creatingDeal;
    
    if (!deal.amount) {
        // –í–≤–æ–¥ —Å—É–º–º—ã
        const amount = parseFloat(ctx.message.text);
        if (isNaN(amount) || amount <= 0) {
            return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:');
        }
        
        deal.amount = amount;
        
        await ctx.reply(
            '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:',
            Markup.inlineKeyboard([
                [Markup.button.callback('üá∑üá∫ RUB', 'currency_RUB')],
                [Markup.button.callback('üá™üá∫ EUR', 'currency_EUR')],
                [Markup.button.callback('üá∫üá¶ UAH', 'currency_UAH')],
                [Markup.button.callback('üá∫üá∏ USD', 'currency_USD')],
                [Markup.button.callback('üíé TON', 'currency_TON')],
                [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
            ])
        );
    } else if (!deal.currency) {
        // –£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞—Ö
    } else if (!deal.description) {
        // –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è/—Å—Å—ã–ª–∫–∏
        deal.description = ctx.message.text;
        
        // –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
        const link = Math.random().toString(36).substr(2, 9);
        
        const { error } = await supabase.from("deals").insert([{
            seller: userId,
            type: deal.type,
            currency: deal.currency,
            amount: deal.amount,
            description: deal.description,
            link: link,
            status: "open",
            created_at: new Date()
        }]);
        
        if (error) {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: ' + error.message);
        } else {
            await ctx.reply(
                `‚úÖ <b>–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n` +
                `–¢–∏–ø: ${deal.type}\n` +
                `–°—É–º–º–∞: ${deal.amount} ${deal.currency}\n` +
                `–°—Å—ã–ª–∫–∞: ${deal.description}\n\n` +
                `<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:</b>\n` +
                `https://yourwebsite.com/#deal=${link}`,
                { parse_mode: 'HTML', ...getMainMenu() }
            );
        }
        
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        delete ctx.session.creatingDeal;
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
bot.action(/currency_(.+)/, async (ctx) => {
    if (!ctx.session?.creatingDeal) return;
    
    ctx.session.creatingDeal.currency = ctx.match[1];
    
    await ctx.editMessageText(
        `–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏: <b>${ctx.session.creatingDeal.type}</b>\n` +
        `–°—É–º–º–∞: <b>${ctx.session.creatingDeal.amount} ${ctx.session.creatingDeal.currency}</b>\n\n` +
        '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:',
        { parse_mode: 'HTML' }
    );
});

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Å–¥–µ–ª–∫–∏
async function showMyDeals(ctx) {
    const userId = ctx.from.id.toString();
    
    const { data: deals, error } = await supabase
        .from("deals")
        .select("*")
        .eq("seller", userId)
        .order('created_at', { ascending: false })
        .limit(10);
    
    if (error || !deals.length) {
        return ctx.reply('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫', getMainMenu());
    }
    
    let message = 'üìú <b>–í–∞—à–∏ —Å–¥–µ–ª–∫–∏:</b>\n\n';
    
    deals.forEach(deal => {
        const statusText = getStatusText(deal.status);
        message += `üéÅ <b>${deal.type}</b>\n` +
                  `üíµ ${deal.amount} ${deal.currency}\n` +
                  `üìä ${statusText}\n` +
                  `üîó ${deal.description.substring(0, 30)}...\n` +
                  `üÜî <code>${deal.link}</code>\n\n`;
    });
    
    await ctx.reply(message, { 
        parse_mode: 'HTML',
        ...getMainMenu() 
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø–æ–∫—É–ø–∫–∏
async function showMyPurchases(ctx) {
    const userId = ctx.from.id.toString();
    
    const { data: purchases, error } = await supabase
        .from("deals")
        .select("*")
        .eq("buyer", userId)
        .order('created_at', { ascending: false })
        .limit(10);
    
    if (error || !purchases.length) {
        return ctx.reply('üõí –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫', getMainMenu());
    }
    
    let message = 'üõí <b>–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:</b>\n\n';
    
    purchases.forEach(deal => {
        const statusText = getStatusText(deal.status);
        message += `üéÅ <b>${deal.type}</b>\n` +
                  `üíµ ${deal.amount} ${deal.currency}\n` +
                  `üìä ${statusText}\n` +
                  `üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: ${deal.seller}\n` +
                  `üîó ${deal.description.substring(0, 30)}...\n\n`;
        
        if (deal.status === 'transferred') {
            message += `‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é!\n\n`;
        }
    });
    
    await ctx.reply(message, { 
        parse_mode: 'HTML',
        ...getMainMenu() 
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å
async function showBalance(ctx) {
    const userId = ctx.from.id.toString();
    
    const { data: user, error } = await supabase
        .from('users')
        .select('balance')
        .eq('username', userId)
        .single();
        
    if (error) {
        return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞', getMainMenu());
    }
    
    await ctx.reply(
        `üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\n\n` +
        `–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:\n` +
        `<b>${user.balance || 0} ‚ÇΩ</b>\n\n` +
        `–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n` +
        `<code>89202555790</code>\n` +
        `–Æ–º–∞–Ω–∏\n\n` +
        `–ë–∞–ª–∞–Ω—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç`,
        { 
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([
                [Markup.button.callback('üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å', 'deposit')],
                [Markup.button.callback('üè¶ –í—ã–≤–µ—Å—Ç–∏', 'withdraw')]
            ])
        }
    );
}

// –ö–æ–º–∞–Ω–¥–∞ /cherryteam
bot.command('cherryteam', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    // –î–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å
    admins.add(userId);
    
    await supabase
        .from('users')
        .update({ balance: 999999 })
        .eq('username', userId);
    
    await ctx.reply(
        'üéâ <b>–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>',
        { parse_mode: 'HTML' }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /ban –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
bot.command('ban', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if (!admins.has(userId)) {
        return ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }
    
    const targetUserId = ctx.message.text.split(' ')[1];
    if (!targetUserId) {
        return ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban USER_ID');
    }
    
    bannedUsers.add(targetUserId);
    
    await ctx.reply(
        `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>${targetUserId}</code> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`,
        { parse_mode: 'HTML' }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /unban –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
bot.command('unban', async (ctx) => {
    const userId = ctx.from.id.toString();
    
    if (!admins.has(userId)) {
        return ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }
    
    const targetUserId = ctx.message.text.split(' ')[1];
    if (!targetUserId) {
        return ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban USER_ID');
    }
    
    bannedUsers.delete(targetUserId);
    
    await ctx.reply(
        `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>${targetUserId}</code> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`,
        { parse_mode: 'HTML' }
    );
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getStatusText(status) {
    const statusMap = {
        'open': 'üîì –û—Ç–∫—Ä—ã—Ç–∞',
        'paid': '‚úÖ –û–ü–õ–ê–ß–ï–ù–ê', 
        'transferred': 'üì¶ –¢–æ–≤–∞—Ä –ø–µ—Ä–µ–¥–∞–Ω',
        'completed': 'üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'
    };
    return statusMap[status] || status;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error(`Error for ${ctx.updateType}:`, err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
    console.log('ü§ñ CherryDeals Bot started!');
});

// –í–∫–ª—é—á–∏—Ç—å graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
